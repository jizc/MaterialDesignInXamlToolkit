<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf">

  <Style TargetType="{x:Type wpf:RatingBar}">
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Primary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type wpf:RatingBar}">
          <ItemsControl
            Margin="{TemplateBinding Padding}"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RatingButtons}">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal" />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
          </ItemsControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ValueItemContainerButtonStyle">
      <Setter.Value>
        <Style TargetType="wpf:RatingBarButton">
          <Style.Setters>
            <Setter Property="Command" Value="{x:Static wpf:RatingBar.SelectRatingCommand}" />
            <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Value}" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="wpf:RatingBarButton">
                  <Grid Background="Transparent">
                    <ContentPresenter
                      Margin="{TemplateBinding Padding}"
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                      Content="{TemplateBinding Content}"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      Focusable="False"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      Tag="{DynamicResource MaterialDesign.Brush.Primary}">
                      <TextElement.Foreground>
                        <MultiBinding Converter="{x:Static wpf:RatingBar+TextBlockForegroundConverter.Instance}">
                          <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                          <Binding Path="Value" RelativeSource="{RelativeSource FindAncestor, AncestorType=wpf:RatingBar}" />
                          <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding>
                      </TextElement.Foreground>
                    </ContentPresenter>
                  </Grid>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style.Setters>
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:RatingBar}}" Value="True">
              <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ValueItemTemplate">
      <Setter.Value>
        <DataTemplate DataType="{x:Type system:Int32}">
          <Viewbox Width="24" Height="24">
            <Canvas Width="24" Height="24">
              <Path Data="M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z" Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ContentPresenter}, Path=(TextElement.Foreground)}" />
            </Canvas>
          </Viewbox>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value=".26" />
      </Trigger>
      <Trigger Property="Value" Value="-1">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.ForegroundLight}" />
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>
